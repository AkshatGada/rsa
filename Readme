RSA Accumulator Repository
This repository is maintained by [Your Name], a protocol engineer and developer with a focus on blockchain technology and cryptographic primitives. The project implements an RSA accumulator along with various functionalities for data extraction, benchmarking, and on-chain verification. The code is designed to be efficient, with support for multi-core processing and batching.

Table of Contents
Overview
Files and Descriptions
Installation
Usage
Contributing
License
Overview
The RSA accumulator is a powerful cryptographic tool that allows for the succinct proof of membership or non-membership within a set of elements. This repository provides a robust implementation of the RSA accumulator, including additional scripts for data extraction, benchmarking, and integration with smart contracts for on-chain verification.

Files and Descriptions
allFunctions.py

Contains the basic boilerplate of all functions used in the RSA accumulator.
This file includes utility functions that are essential for the operation of the accumulator and are reused across multiple scripts.
data.py

Extracts transaction data from a range of blockchain nodes using the Infura API.
This script serves as the data retrieval backbone, ensuring that transaction data is readily available for the RSA processes.
benchmark.py

Generates 100,000 random hashes to benchmark various aspects of the RSA accumulator.
The benchmarking focuses on measuring accumulation time, witness generation time, and verification time to evaluate performance.
rsa.py

The core script for performing RSA accumulator operations on the transaction data retrieved by data.py.
Handles the core RSA computations necessary for accumulating elements and generating proofs.
rsa_with_delete.py

Extends the functionality of rsa.py by adding the ability to delete elements from the RSA accumulator.
Useful for scenarios where elements need to be dynamically managed within the accumulator.
verify.sol

A Solidity contract designed for on-chain verification of RSA accumulator proofs.
Enables integration of RSA accumulator functionalities within blockchain environments, providing a means for decentralized verification.
checkpoint.py

Code to generate and store checkpoints of the accumulator's state.
Note: This script is still under development and has not yet been fully tested.
multi.py and multi1.py

Implement RSA accumulator operations utilizing multiple processing cores for improved performance.
These scripts parallelize the RSA computations, making the system more efficient on multi-core processors.
witness.json

Stores all witnesses generated by the rsa.py script.
Witnesses are used to prove the membership or non-membership of elements within the accumulator.
transactions.json

A storage file for all retrieved transactions and their corresponding hashes.
Acts as the local database for transaction data that is processed by the RSA accumulator.
batchRsa.py

Implements batching functionality to accumulate multiple elements in a single operation.
Note: This script is experimental and has not been fully tested yet.
Installation
Clone the repository:

bash
Copy code
git clone https://github.com/AkshatGada/rsa.git
cd rsa
Install the required Python packages:

bash
Copy code
pip install -r requirements.txt
(Optional) Compile the verify.sol contract using a Solidity compiler, such as solc or using Remix IDE.

Usage
Running RSA Operations

To perform RSA operations on transaction data, use the rsa.py script:
bash
Copy code
python rsa.py
Benchmarking

To run benchmarks on hash generation, accumulation, and verification, use the benchmark.py script:
bash
Copy code
python benchmark.py
Multi-Core Processing

Utilize multiple processing cores for RSA computations with:
bash
Copy code
python multi.py
On-Chain Verification

Deploy the verify.sol contract to your preferred blockchain and interact with it for on-chain verification of RSA accumulator proofs.
Contributing
Contributions are welcome! Please fork the repository and submit a pull request with your improvements. Ensure that your code adheres to the repository's style guidelines.

License
This project is licensed under the MIT License. See the LICENSE file for more details.
