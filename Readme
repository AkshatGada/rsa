Here's a professional README for the GitHub repository:

---

# RSA Accumulator Repository

This repository contains the implementation of an RSA accumulator, along with additional functionalities for data extraction, benchmarking, and on-chain verification. The code is designed to efficiently handle cryptographic operations, with support for multiple processing cores and batching functionalities. 

## Table of Contents
- [Overview](#overview)
- [Files and Descriptions](#files-and-descriptions)
- [Installation](#installation)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Overview
This repository provides a comprehensive implementation of an RSA accumulator, a cryptographic primitive used to generate succinct proofs of membership or non-membership for a set of elements. The codebase supports features such as data extraction, benchmarking, RSA operations, and multi-core processing.

## Files and Descriptions

1. **allFunctions.py**
   - Contains the basic boilerplate of all functions used in the RSA accumulator.
   - Centralized utility functions that are reused across various scripts.

2. **data.py**
   - Extracts data from a range of nodes using the Infura API key.
   - Facilitates retrieval of transaction data for further processing.

3. **benchmark.py**
   - Generates 100K random hashes for benchmarking purposes.
   - Measures accumulation time, witness generation time, and verification time.

4. **rsa.py**
   - Performs RSA functions on transaction data retrieved by `data.py`.
   - Core script for RSA-based operations within the accumulator.

5. **rsa_with_delete.py**
   - Extends `rsa.py` by adding support for the delete function within the RSA accumulator.

6. **verify.sol**
   - A Solidity contract file designed for on-chain verification.
   - Enables the use of RSA accumulator proofs within a blockchain environment.

7. **checkpoint.py**
   - Code to generate and store all checkpoints.
   - Note: This feature is currently not tested.

8. **multi.py** and **multi1.py**
   - Implement RSA operations utilizing multiple processing cores.
   - Enhance performance by parallelizing RSA computations.

9. **witness.json**
   - Stores all witnesses generated by the `rsa.py` file.
   - Used for verifying membership/non-membership proofs.

10. **transactions.json**
    - Stores all retrieved transactions and their corresponding hashes.
    - Acts as a data repository for transaction processing.

11. **batchRsa.py**
    - Implements batching functionality for RSA operations.
    - Note: This feature is currently not tested.

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/AkshatGada/rsa.git
   cd rsa
   ```

2. Install the required Python packages:
   ```bash
   pip install -r requirements.txt
   ```

3. (Optional) Compile the `verify.sol` contract using a Solidity compiler, such as `solc` or using Remix IDE.

## Usage

1. **Running RSA Operations**
   - To perform RSA operations on transaction data, use the `rsa.py` script:
     ```bash
     python rsa.py
     ```

2. **Benchmarking**
   - To run benchmarks on hash generation, accumulation, and verification, use the `benchmark.py` script:
     ```bash
     python benchmark.py
     ```

3. **Multi-Core Processing**
   - Utilize multiple processing cores for RSA computations with:
     ```bash
     python multi.py
     ```

4. **On-Chain Verification**
   - Deploy the `verify.sol` contract to your preferred blockchain and interact with it for on-chain verification of RSA accumulator proofs.

## Contributing

Contributions are welcome! Please fork the repository and submit a pull request with your improvements. Ensure that your code adheres to the repository's style guidelines.

## License

This project is licensed under the MIT License. See the `LICENSE` file for more details.

---

This README provides a structured and detailed overview of the repository, helping other developers quickly understand and navigate the codebase.